package inlämning2;

import java.awt.Color;

public class Generator {

	public Color[][] picture;
	Color[] color;
	static int ITERATIONS = 200;
	private int res;

	public Generator() {
		color = new Color[201];
		for (int i = 0; i < 200; i++) {
			color[i] = Color.getHSBColor((i * ((float) 100 / 250)) / 30,
					(float) 0.8, (float) 0.8);
		}
	}

	/** Ritar en bild i fönstret i användargränssnittet gui */
	public void render(MandelbrotGUI gui) {

		gui.disableInput();
		int ITERATIONS2 = 200;

		switch (gui.getResolution()) {
		case MandelbrotGUI.RESOLUTION_VERY_HIGH:
			res = 1;
			break;
		case MandelbrotGUI.RESOLUTION_HIGH:
			res = 3;
			break;
		case MandelbrotGUI.RESOLUTION_MEDIUM:
			res = 5;
			break;
		case MandelbrotGUI.RESOLUTION_LOW:
			res = 7;
			break;
		case MandelbrotGUI.RESOLUTION_VERY_LOW:
			res = 9;
			break;
		}

		if (ITERATIONS != ITERATIONS2) {
			color = new Color[ITERATIONS2 + 1];
			for (int i = 0; i < ITERATIONS2; i++) {
				color[i] = Color.getHSBColor((i * ((float) 100 / 250)) / 30,
						(float) 0.8, (float) 0.8);
			}
		}

		Complex[][] complex = mesh(gui.getMinimumReal(), gui.getMaximumReal(),
				gui.getMinimumImag(), gui.getMaximumImag(), gui.getWidth(),
				gui.getHeight());

		Color[][] picture = new Color[gui.getHeight() / res + 1][gui.getWidth()
				/ res + 1];

		for (int i = 0; i < gui.getHeight() / res; i++) {
			for (int k = 0; k < gui.getWidth() / res; k++) {
				Complex c = complex[res / 2 + i * res][res / 2 + k * res];
				Complex z = new Complex(0, 0);
				int n = 0;

				while (n < ITERATIONS && z.getAbs2() <= 4) {
					n++;
					z.mul(z);
					z.add(c);
				}

				switch (gui.getMode()) {
				case MandelbrotGUI.MODE_COLOR:
					if (z.getAbs2() <= 4) {
						picture[i][k] = Color.MAGENTA;
					} else {
						picture[i][k] = color[n];
					}
					break;
				case MandelbrotGUI.MODE_BW:
					if (z.getAbs2() <= 4) {
						picture[i][k] = Color.BLACK;
					} else {
						picture[i][k] = Color.WHITE;
					}
				}
			}
		}

		gui.putData(picture, res, res);
		gui.enableInput();
	}

	/**
	 * Skapar en matris där varje element är ett komplext tal som har rätt
	 * koordinater (se beskrivning nedan)
	 */
	private Complex[][] mesh(double minRe, double maxRe, double minIm,
			double maxIm, int width, int height) {
		Complex[][] complex = new Complex[height][width];
		for (int i = 0; i < height; i++) {
			for (int j = 0; j < width; j++) {
				complex[i][j] = new Complex(minRe + (maxRe - minRe)
						/ (width - 1) * j, maxIm - (maxIm - minIm)
						/ (height - 1) * i);
			}
		}
		return complex;
	}
}
